name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - uses: actions/checkout@v4.0.0  # Pinned to a specific version

    # Step 2: Set up Docker Buildx with docker-container driver
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true
        driver: docker-container

    # Step 3: Restore cache from GitHub Actions cache
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache  # Directory to store cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}  # Unique cache key based on commit
        restore-keys: |
          ${{ runner.os }}-buildx-

    # Step 4: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}   # Docker Hub username stored as a secret
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}  # Docker Hub access token stored as a secret

    # Step 5: Set up an environment variable to store the datestamp and git commit
    - name: Set up datestamp and git commit tag
      run: echo "IMAGE_TAG=$(date +'%y%m%d')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    # Step 6: Build the Docker image with both the timestamp tag and latest, with caching
    - name: Build the Docker image
      run: |
        echo "Building the Docker image..."
        docker buildx build . --file Dockerfile --platform linux/amd64 \
          --tag photoangell/ymbbt-faceclone-dev:${{ env.IMAGE_TAG }} \
          --tag photoangell/ymbbt-faceclone-dev:latest \
          --push
    # \
    # --progress=plain \
    # --cache-from=type=local,src=/tmp/.buildx-cache \
    # --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \

    # # Step 7: Save cache to GitHub Actions cache
    # - name: Save cache
    #   uses: actions/cache@v3
    #   with:
    #     path: /tmp/.buildx-cache
    #     key: ${{ runner.os }}-buildx-${{ github.sha }}

    # # Step 8: Push the Docker image to Docker Hub (only if the build succeeds)
    # - name: Push the Docker image
    #   if: success()  # This ensures the push only happens if the build succeeds
    #   run: |
    #     echo "Pushing the Docker image with tag: ${{ env.IMAGE_TAG }}..."
    #     docker push photoangell/ymbbt-faceclone-dev:${{ env.IMAGE_TAG }}
    #     docker push photoangell/ymbbt-faceclone-dev:latest

    # Step 9: Configure notifications for build failures and successes
    - name: Notify build status
      if: always()
      run: |
        if [ "${{ job.status }}" == "failure" ]; then
          echo "Build failed"
        else
          echo "Build succeeded"
        fi